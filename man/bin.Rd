% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/wrapper_funcs.R
\name{bin}
\alias{bin}
\title{bin}
\usage{
bin(data, y, w = rep(1, length(y)), min.iv = 0.001, min.cnt = 25,
  min.res = 5, mono = 0, max.bin = 10, exceptions = numeric(0))
}
\arguments{
\item{data}{\code{\link{data.frame}} of independent predictors to discretize.
Can only bin factors and numeric columns. All other data types are removed
from the scorecard object.}

\item{y}{Response variable. Currently, only binary performance is supported.}

\item{w}{Weight variable. If omitted, a weight variable of all 1s is created.}

\item{min.iv}{The minimum information value to split a continuous variable.}

\item{min.cnt}{The minumum number of observations that must be in a bin after
any split.}

\item{min.res}{The minimum number of response observations that must be in a
bin after any split.}

\item{mono}{Monotonicity constraint
\itemize{
 \item{0 }{ No monotoncity enforced - the default.}
 \item{1 }{ Increasing monotoncically with the \code{y}}
 \item{-1 } {Decreasing monotoncically with the \code{y}}
 \item{2 }{ Either increasing or decreasing montonically with the \code{y}}
}}

\item{max.bin}{The maximum number of bins into which \code{x} is discretized.}

\item{exceptions}{A numeric vector of values to be excluded from the
discretization process.}
}
\value{
A \code{Scorecard} object with \code{data} variables discretized.
}
\description{
The starting point for any rubbish scorecard. The bin function
prepares variables for scorecard modeling by returning a
\code{\link{Scorecard}} object that is easily manipulated.
}
\details{
\code{bin} Is the workhorse of rubbish. Depending on the input
variable class type, it will behave differently. For numeric and integer
variables it will discretize using information value. The returned object is
of class \code{Continuous}. Factors are summarized and passed through as-is.
The returned object for factors if of class \code{Discrete}.

The operations that can be performed on a bin depend on its class. Continuous
bins are subject to the constratins passed into the bin functions.
Furthermore, only adjacent levels may be collapsed. Discrete bins are not
constrained by the \code{bin} function parameters and non-adjacent levels
may be collapsed.

Missing values are always held out of binning. They may be combined only if
the variable was binned as discrete.
}

